---

# Notes:
# Sample project C code is not presently written to produce a release artifact.
# As such, release build options are disabled.
# This sample, therefore, only demonstrates running a collection of unit tests.

:project:
  :use_exceptions: FALSE
  :use_mocks: TRUE
  :use_test_preprocessor: TRUE
  :use_preprocessor_directives: FALSE
  :use_auxiliary_dependencies: TRUE
  :auto_link_deep_dependencies: TRUE
  :build_root: build
  :release_build: TRUE
  :test_file_prefix: test_
  :which_ceedling: vendor/ceedling
  :ceedling_version: 0.30.0
  :options_paths:
    - project/options
  #   - external/shared/options
  :default_tasks:
    - test:all

:test_build:
  :use_assembly: FALSE

:release_build:
  :output: sua50.hex
  :use_assembly: TRUE
  :artifacts:
    - sua50.map

:environment:

:extension:
  :executable: .hex

:paths:
  :test:
    - +:test/**
    - -:test/support
  :source:
    - src/**
  :include:
  :support:
    - test/support
  :test_toolchain_include:
  :release_toolchain_include:
    # - C:/Program Files (x86)/Microchip/xc32/v1.21/pic32mx/include/
  :libraries: []

:defines:
  # in order to add common defines:
  #  1) remove the trailing [] from the :common: section
  #  2) add entries to the :common: section (e.g. :test: has TEST defined)
  # :common: &common_defines []
  :common: &common_defines
    # This flags will be used during compiling
  :test:
    - *common_defines
    - TEST
    # - FEATURE_X=OFF
  :test_preprocess:
    - *common_defines
    - TEST
  :release:
    - USE_FULL_DEBUG
    - PBCLK=40000000ul
    - CFG_INCLUDE_SUA_BOARD
    - DEBUG_OUTPUT=UART_USE
    - DBG_PORT=DBG_UART_PIC32
    - QUEUE_STATIC_MODE=1
    - _GSP_DEBUG_ENABLE
    - _MOTORS_DEBUG_ENABLE
    - MOTOR_TYPE_MCDC3002P
    - CO_FSYS=80000
    - CO_USE_GLOBALS
    - CO_PBCLK=40000
    - QCBOR_DISABLE_FLOAT_HW_USE
    - COMPASS_ARDU_IMU
    - _UAV_POS_SOURCE_ETH
    - SUAP_DEBUG_ENABLE
    - TEL_TEST_MODE
    - TEL_SER_CBOR
    - NO_CAN_RXF
    - DBG_OUTPUT_UART
    - GPL_LICENSE_TERMS_ACCEPTED
    - SUA_BOARD
    - DNS_CLIENT_SUPPORT=0
    - NBNS_CLIENT_SUPPORT=0
    - NET_DEBUG_ENABLE
    - MOTORS_DEBUG_ENABLE
    - GSP_DEBUG_ENABLE
    - COMPASS_DEBUG_ENABLE
  # :release_preprocess:
  # :source:
    # - FEATURE_X=ON

# :flags:
#   :release:
#     :compile:
#       :main:       # add '-Wall' to compilation of main.c
#         - -Wall
#       :fan:        # add '--O2' to compilation of fan.c
#         - --O2
#       :'test_.+':   # add '-pedantic' to all test-files
#         - -pedantic
#       :*:          # add '-foo' to compilation of all files not main.c or fan.c
#         - -foo
#   :test:
#     :compile:
#       :main:       # add '--O1' to compilation of main.c as part of test builds including main.c
#         - --O1
#     :link:
#       :test_main:  # add '--bar --baz' to linking of test_main.exe
#         - --bar
#         - --baz

:cmock:
  :mock_prefix: mock_
  :when_no_prototypes: :warn
  :enforce_strict_ordering: TRUE
  :plugins:
    - :ignore
    - :callback
  :treat_as:
    uint8:    HEX8
    uint16:   HEX16
    uint32:   UINT32
    int8:     INT8
    bool:     UINT8

# Add -gcov to the plugins list to make sure of the gcov plugin
# You will need to have gcov and gcovr both installed to make it work.
# For more information on these options, see docs in plugins/gcov
:gcov:
  :reports:
    - HtmlDetailed
  :gcovr:
    :html_medium_threshold: 75
    :html_high_threshold: 90

:tools:
# Ceedling defaults to using gcc for compiling, linking, etc.
# As [:tools] is blank, gcc will be used (so long as it's in your system path)
# See documentation to configure a given toolchain for use
  # :release_assembler:
  :release_compiler:
    :executable: xc32-gcc
    :name: 'release compiler'
    :arguments:
      - -g
      - -x c
      - -c ${1}                       #source code input file (Ruby method call param list sub)
      - -mprocessor=32MX795F512L
      - -D$: COLLECTION_DEFINES_RELEASE_AND_VENDOR
      - -I$: COLLECTION_PATHS_SOURCE_INCLUDE_VENDOR
      - -I$: COLLECTION_PATHS_RELEASE_TOOLCHAIN_INCLUDE
      - -o ${2}                       #object file output (Ruby method call param list sub)
      - -Wall
      - -O1 
      - -MMD -MP -MF ${4}
      - -MT ${2} 
  :release_linker:
    :executable: xc32-gcc
    :name: 'release linker'
    :arguments:
      - -mprocessor=32MX795F512L
      - -o ${2}
      - ${1}
      - -Wl,--defsym=__MPLAB_BUILD=1,--defsym=_min_heap_size=2000,--defsym=_min_stack_size=2000,-Map=./build/release/sua50.map --report-mem
      # - -g
      # - -mdebugger
      # - -DPICkit3PlatformTool=1
      # - -omf=elf
  # :release_dependencies_generator:

# LIBRARIES
# These libraries are automatically injected into the build process. Those specified as
# common will be used in all types of builds. Otherwise, libraries can be injected in just
# tests or releases. These options are MERGED with the options in supplemental yaml files.
:libraries:
  :placement: :end
  :flag: "-l${1}"
  :path_flag: "-L ${1}"
  :system: []    # for example, you might list 'm' to grab the math library
  :test: []
  # - reqs/lib/libmy_math.so # This is the name of the .so (Shared Object) library we are going to use
  :release: []

:plugins:
  :load_paths:
    - vendor/ceedling/plugins
  :enabled:
    - stdout_pretty_tests_report
    - module_generator
    - raw_output_report
    - xml_tests_report
...
